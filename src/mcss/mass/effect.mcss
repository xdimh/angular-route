@import 'var';
@import 'css3';

/**
mass effect.mcss almost all effect refactoring form 

http://nec.netease.com/library/category/#animation
Licensed under the MIT license
Copyright (c) 2013 NetEase

and animate.css
https://github.com/daneden/animate.css
Licensed under the MIT license
*/

/**
 * This file is a good example show some mcss'advantage , like first-class function...
 */

/**
 * 1. setup
 * =======================
 */
$effect-setup = {
  body {
    -webkit-backface-visibility: hidden;
  }
  .animated {
    $animation-duration: 1s;
    $animation-fill-mode: both;
  }
}



// building effect
$effect = ($name, $block, $with-class){
  $keyframes($name, $block);

  .animated.#{$name}{
    $animation-name: $name;
    @if $with-class{
      $with-class();
    }
  }
}




//generate building function
$effect-func = ($name, $block, $with-class){
  define('$' + $name, ($args..., $name2 = $name){
    @if !$effect-outport{
      $effect-setup();
      $effect-outport ^= true;
    }
    // if last arguments is not a text
    @if typeof($name2) != 'text'{
      push($args, $name2);
      $name2 = $name;
    }
    // placeholder the first elem
    unshift($args, 1);
    $effect($name2, ($prefix){
      // setup the $args
      shift($args);
      unshift($args, $prefix);

      apply($block, $args);
    }, $with-class);
    // true means this define will in globalScope
  }, true);
}

// use $effect or $effect-func baseon $effect-outport variable
@if $effect-outport{
   $-generate  = $effect;
   $effect-setup();
}@else{
   $-generate  = $effect-func;
}


/**
 * 2. effect
 * ==========================
 */

// $flash()
// ----------------
$-generate(flash,($prefix){
  0%, 50%, 100% {opacity: 1;} 
  25%, 75% {opacity: 0;}
});


// $shake($offset = 15px)
// --------------------
$-generate(shake, ($prefix, $offset = 15px){

  0%, 100% {#{$prefix}transform: translateX(0);}
  10%, 30%, 50%, 70%, 90% {#{$prefix}transform: translateX(-$offset);}
  20%, 40%, 60%, 80% {#{$prefix}transform: translateX($offset);}
});


// tada
$-generate(tada, ($prefix, $scale-offset = 0.2, $degree = 3deg){

  0% {#{$prefix}transform: scale(1);} 
  10%, 20% {#{$prefix}transform: scale(1 - $scale-offset) rotate(-$degree);}
  30%, 50%, 70%, 90% {#{$prefix}transform: scale(1 + $scale-offset) rotate($degree);}
  40%, 60%, 80% {#{$prefix}transform: scale(1 + $scale-offset) rotate(-$degree);}
  100% {#{$prefix}transform: scale(1) rotate(0);}
});

// swing
$-generate(swing, ($prefix, $degree = 12deg){
  @if($prefix == -webkit-){
    20%, 40%, 60%, 80%, 100% { -webkit-transform-origin: top center; } }

  20% { #{$prefix}transform: rotate($degree); } 
  40% { #{$prefix}transform: rotate(-$degree / 3 * 2); }
  60% { #{$prefix}transform: rotate($degree / 3); }  
  80% { #{$prefix}transform: rotate(-$degree / 3); } 
  100% { #{$prefix}transform: rotate(0deg); }
}, {
  $transform-origin: top center;
});

// wobble
$-generate(wobble, ($prefix, $offset = 25%, $degree = 5deg){
  $step = $offset / 5;
  $deg = $degree / 5;

  0%  { #{$prefix}transform: translateX(0%); }
  15% { #{$prefix}transform: translateX(-$offset) rotate(-$degree); }
  30% { #{$prefix}transform: translateX($step * 4) rotate(4 * $deg); }
  45% { #{$prefix}transform: translateX(-$step * 3) rotate(-3 * $deg); }
  60% { #{$prefix}transform: translateX($step * 2) rotate(2 * $deg); }
  75% { #{$prefix}transform: translateX(-$step) rotate(-1 * $deg); }
  100% { #{$prefix}transform: translateX(0); }
});
// wiggle
$-generate(wiggle, ($prefix, $degree = 12deg){
  $deg = $degree / 6;
  0%  { #{$prefix}transform: skewX($deg * 6) }
  15% { #{$prefix}transform: skewX(-$deg * 5); }
  30% { #{$prefix}transform: skewX(4 * $deg); }
  45% { #{$prefix}transform: skewX(-3 * $deg); }
  60% { #{$prefix}transform: skewX(2 * $deg); }
  75% { #{$prefix}transform: skewX(-1 * $deg); }
  100% { #{$prefix}transform: skewX(0deg)}
});

// pulse
// --------------------------
$-generate(pulse, ($prefix, $scale-offset=0.1){
  0% { #{$prefix}transform: scale(1); }  
  50% { #{$prefix}transform: scale(1 + $scale-offset); }
  100% { #{$prefix}transform: scale(1); }
});

// flip
// --------------------------
$-generate(flip, ($prefix, $perspect = 300px){

  0% {
    #{$prefix}transform: perspective($perspect) rotateY(0);
    #{$prefix}animation-timing-function: ease-out; }
  40% {
    #{$prefix}transform: perspective($perspect) translateZ(100px) rotateY(170deg);
    #{$prefix}animation-timing-function: ease-out; }
  50% {
    #{$prefix}transform: perspective($perspect) translateZ(100px ) rotateY(190deg) scale(1);
    #{$prefix}animation-timing-function: ease-in; }
  80% {
    #{$prefix}transform: perspective($perspect) rotateY(360deg) scale(.95);
    #{$prefix}animation-timing-function: ease-in; }
  100% {
    #{$prefix}transform: perspective($perspect) scale(1);
    #{$prefix}animation-timing-function: ease-in; }
},{
  // !import 可以再声明中，但是在mcss中无法传入函数(它不是一个值), 这里我们用Text转义
  $backface-visibility:  visible t('!important');
});



$-rotate = ($direct, $deg){
  @if $direct == x{
    @return rotateX($deg);
  }
  @return rotateY($deg);
}
// flipIn
// ---------------
$flipInBlock = ($prefix, $direct){
  0% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 90deg);
      opacity: 0; }
  40% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, -10deg); }
  70% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 10deg); }
  100% {
      #{$prefix}transform: perspective(400px) $-rotate($direct, 0deg);
      opacity: 1; }

}

$-generate(flipInX, ($prefix){
  $flipInBlock($prefix, x);
}, {
  $backface-visibility:  visible t('!important');
});

$-generate(flipInY, ($prefix){
  $flipInBlock($prefix, y);
}, {
  $backface-visibility:  visible t('!important');
});

// FlipOut
// -----------------------
$flipOutBlock = ($prefix, $direct){
  0% {
        #{$prefix}transform: perspective(400px) $-rotate($direct, 0deg);
        opacity: 1; }
  100% {
        #{$prefix}transform: perspective(400px) $-rotate($direct, 90deg);
        opacity: 0; }
}

// X
$-generate(flipOutX, ($prefix){
  $flipOutBlock($prefix, x, out);
},{
    $backface-visibility:  visible t('!important');
});

// Y
$-generate(flipOutY, ($prefix){
  $flipOutBlock($prefix, y);
},{
    $backface-visibility:  visible t('!important');
});



// FadeIn

$-generate(fadeIn, ($prefix){
  0% {opacity: 0}
  100% {opacity: 1}
});

$-generate(fadeOut, ($prefix){
  0% {opacity: 1}
  100% {opacity: 0}
});

$-generate(fadeInX, ($prefix, $offset = 30px){
  0% {opacity: 0; #{$prefix}transform: translateX($offset); }
  100% {opacity: 1; #{$prefix}transform: translateX(0); }
});
$-generate(fadeInY, ($prefix, $offset = 30px){
  0% {opacity: 0; #{$prefix}transform: translateY($offset); }
  100% {opacity: 1; #{$prefix}transform: translateY(0); }
});

$-generate(fadeOutX, ($prefix, $offset = 30px){
  0% {opacity: 1; #{$prefix}transform: translateX(0); }
  100% {opacity: 0; #{$prefix}transform: translateX($offset); }
});

$-generate(fadeOutY, ($prefix, $offset = 30px){
  0% {opacity: 1; #{$prefix}transform: translateY(0); }
  100% {opacity: 0; #{$prefix}transform: translateY($offset); }
});


// $bounce($height)
// ------------------
$-generate(bounce, ($prefix, $height=40px){

  0%, 20%, 50%, 80%, 100% {#{$prefix}transform: translateY(0);}
  40% {#{$prefix}transform: translateY(-$height);}
  60% {#{$prefix}transform: translateY(-$height / 2);}
});

$-generate(bounceIn, ($prefix){

  0% {opacity: 0; #{$prefix}transform: scale(.3)}
  50% {opacity: 1; #{$prefix}transform: scale(1.05)}
  70% {#{$prefix}transform: scale(.9)}
  100% {#{$prefix}transform: scale(1)}

});

// $bounceOut
// -----------------------
$-generate(bounceOut, ($prefix){
  0% {#{$prefix}transform: scale(1) }
  25% {#{$prefix}transform: scale(.95) }
  50% {opacity: 1; #{$prefix}transform: scale(1.1) }
  100% {opacity: 0; #{$prefix}transform: scale(.3) }

});





$-generate(rotateIn, ($prefix, $start-deg= -360deg, $start-scale = 1.2){
  0% {
    opacity: 0;
    #{$prefix}transform: rotate($start-deg) scale($start-scale);
  }
  100% {
    #{$prefix}transform: rotate(0) scale(1);
    opacity: 1
  }
});

$-generate(rotateOut, ($prefix, $end-deg= -360deg, $end-scale= 0.8){
  0% {
    #{$prefix}transform: rotate(0) scale(1);
    opacity: 1;
  }
  100% {
    #{$prefix}transform: rotate($end-deg) scale($end-scale);
    opacity: 0;
  }
});

