
@import 'var';
/**
 * convert the @if statement to function
 * beacuse call is a expression(means have value), sometimes can simplify our code
 * __example__:
 * $max = 100px;
 * left: $if( $max >= 100px, 300px, 600px);
 * 
 */
$if = ($test, $then, $alt){
    @if len($arguments) < 2 { error('$if at leat 2 param')}
    @if $test{
       @return $then; 
    }
    @return $alt;
}


/**
 * just like object in javascript, in mcss try use valueslist to fake a object
 * and use $map to get the value
 *
 * __example__ :;
 * $list = one 1, two  (2 3), three (3, 4, 5);
 *          
 * $map($list, two) // => 2 3
 * __warn__: if the list value use paren to wrap it force it as a expression;
 */
$map = ($list, $key){
  @if typeof($list) != 'valueslist'{
    error('must valueslist')
  }
  @for $li,$i in $list{
    @if $i == $key{
      @return $li;
    }
  }
  @return null;
}


/**
 * prefixr a __declaration__ with $property and $value
 * the default vendors is webkit moz ms o
 */
$prefixr = ($property, $value , $vendors){
    $vendors ?= webkit moz ms o;
    @if $value == null {
        @return {
            @return $prefixr($property, $arguments, $vendors);
        }
    }
    @for $vendor of $vendors {
        #{'-' + $vendor + '-' + $property} : $value;
    }
    #{$property} : $value;
}

// @debug $if(1, 2, 3);
// @debug $map((
//     one (1,2,3), 
//     two (2,3,4), 
//     three (3,4,5)
//     ), three);

// $border-radius = $prefixr('border-radius', null);
// $border-box = $prefixr('border-box', null, hello);

// body{
//     $border-radius: 10px solid #fff, 20px solid;
//     $border-box: $prefixr;
// }


$ops-map = 
  left right,
  right left,
  top bottom,
  bottom top;

$opposite = ($value){
  @if is-list($value){
    @return $map($ops-map, index($value, 0)) $map($ops-map, index($value, 1));
  }
  @return $map($ops-map, $value); 
}

$side2corner = ($side){
  @if $side == left{
    @return top-left, bottom-left;
  }
  @if $side == right{
    @return top-right, bottom-right;
  }
  @if $side == top{
    @return top-left, top-right;
  }
  @if $side == bottom{
    @return bottom-left, bottom-right;
  }
}

$prefix-transition = ($properties){
  @if typeof($properties) == 'valueslist' {
    
  }
}




/**
 * other private functions
 */
$linear-pos = ($pos){
  $type-pos = typeof($pos);
  $corner-or-side = null;
  @if $type-pos == 'values' {
    $nth0 = index($pos, 0);
    @if $nth0 == to { //spec version means end position
        $corner-or-side = $opposite(slice($pos, 1));
    }@else{           // start position
        $corner-or-side = $pos;
    }
  }@else{
    $corner-or-side = $pos;
  }
  @return $corner-or-side;
}

$get-stop-color = ($color-stop){
  @if is-list($color-stop){
      @return index($color-stop, 0)
  }
  @return $color-stop;
}


$transition-prop-test = 'transform|perspective|transform-origin';
$transition-prop-prefix = ($props, $prefix){
  $type = typeof($props);
  @if $type == 'valueslist'{
    $res = ();
    @for $prop of $props{
      push($res, $transition-prop-prefix($prop, $prefix));
    }
    @return $res;
  }
  @if $type == 'values'{
    $props = t($props);
  }
  @return $if(match($transition-prop-test, $props), $prefix + $props, $props);
}
